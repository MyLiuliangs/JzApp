package com.suda.jzapp.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.suda.jzapp.dao.greendao.AccountType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT_TYPE".
*/
public class AccountTypeDao extends AbstractDao<AccountType, Long> {

    public static final String TABLENAME = "ACCOUNT_TYPE";

    /**
     * Properties of entity AccountType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountTypeID = new Property(1, Integer.class, "AccountTypeID", false, "ACCOUNT_TYPE_ID");
        public final static Property AccountDesc = new Property(2, String.class, "AccountDesc", false, "ACCOUNT_DESC");
        public final static Property AccountIcon = new Property(3, Integer.class, "AccountIcon", false, "ACCOUNT_ICON");
    };


    public AccountTypeDao(DaoConfig config) {
        super(config);
    }
    
    public AccountTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT_TYPE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT_TYPE_ID\" INTEGER," + // 1: AccountTypeID
                "\"ACCOUNT_DESC\" TEXT," + // 2: AccountDesc
                "\"ACCOUNT_ICON\" INTEGER);"); // 3: AccountIcon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountType entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer AccountTypeID = entity.getAccountTypeID();
        if (AccountTypeID != null) {
            stmt.bindLong(2, AccountTypeID);
        }
 
        String AccountDesc = entity.getAccountDesc();
        if (AccountDesc != null) {
            stmt.bindString(3, AccountDesc);
        }
 
        Integer AccountIcon = entity.getAccountIcon();
        if (AccountIcon != null) {
            stmt.bindLong(4, AccountIcon);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountType readEntity(Cursor cursor, int offset) {
        AccountType entity = new AccountType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // AccountTypeID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AccountDesc
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // AccountIcon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountType entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountTypeID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAccountDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccountIcon(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountType entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountType entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
