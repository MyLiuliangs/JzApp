package com.suda.jzapp.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REMARK_TIP".
*/
public class RemarkTipDao extends AbstractDao<RemarkTip, Long> {

    public static final String TABLENAME = "REMARK_TIP";

    /**
     * Properties of entity RemarkTip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UseTimes = new Property(1, Integer.class, "useTimes", false, "USE_TIMES");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property SyncStatus = new Property(3, Boolean.class, "SyncStatus", false, "SYNC_STATUS");
        public final static Property IsDel = new Property(4, Boolean.class, "isDel", false, "IS_DEL");
    }


    public RemarkTipDao(DaoConfig config) {
        super(config);
    }
    
    public RemarkTipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REMARK_TIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USE_TIMES\" INTEGER," + // 1: useTimes
                "\"REMARK\" TEXT," + // 2: remark
                "\"SYNC_STATUS\" INTEGER," + // 3: SyncStatus
                "\"IS_DEL\" INTEGER);"); // 4: isDel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REMARK_TIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RemarkTip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer useTimes = entity.getUseTimes();
        if (useTimes != null) {
            stmt.bindLong(2, useTimes);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        Boolean SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(4, SyncStatus ? 1L: 0L);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(5, isDel ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RemarkTip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer useTimes = entity.getUseTimes();
        if (useTimes != null) {
            stmt.bindLong(2, useTimes);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        Boolean SyncStatus = entity.getSyncStatus();
        if (SyncStatus != null) {
            stmt.bindLong(4, SyncStatus ? 1L: 0L);
        }
 
        Boolean isDel = entity.getIsDel();
        if (isDel != null) {
            stmt.bindLong(5, isDel ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RemarkTip readEntity(Cursor cursor, int offset) {
        RemarkTip entity = new RemarkTip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // useTimes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // SyncStatus
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // isDel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RemarkTip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUseTimes(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSyncStatus(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsDel(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RemarkTip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RemarkTip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RemarkTip entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
