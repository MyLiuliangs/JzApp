package com.suda.jzapp.dao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENCY".
*/
public class CurrencyDao extends AbstractDao<Currency, Long> {

    public static final String TABLENAME = "CURRENCY";

    /**
     * Properties of entity Currency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FromCurrency = new Property(1, String.class, "fromCurrency", false, "FROM_CURRENCY");
        public final static Property ToCurrency = new Property(2, String.class, "toCurrency", false, "TO_CURRENCY");
        public final static Property Currency = new Property(3, Double.class, "currency", false, "CURRENCY");
        public final static Property LastUpdate = new Property(4, java.util.Date.class, "lastUpdate", false, "LAST_UPDATE");
    };


    public CurrencyDao(DaoConfig config) {
        super(config);
    }
    
    public CurrencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENCY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM_CURRENCY\" TEXT," + // 1: fromCurrency
                "\"TO_CURRENCY\" TEXT," + // 2: toCurrency
                "\"CURRENCY\" REAL," + // 3: currency
                "\"LAST_UPDATE\" INTEGER);"); // 4: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENCY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Currency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromCurrency = entity.getFromCurrency();
        if (fromCurrency != null) {
            stmt.bindString(2, fromCurrency);
        }
 
        String toCurrency = entity.getToCurrency();
        if (toCurrency != null) {
            stmt.bindString(3, toCurrency);
        }
 
        Double currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindDouble(4, currency);
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(5, lastUpdate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Currency entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String fromCurrency = entity.getFromCurrency();
        if (fromCurrency != null) {
            stmt.bindString(2, fromCurrency);
        }
 
        String toCurrency = entity.getToCurrency();
        if (toCurrency != null) {
            stmt.bindString(3, toCurrency);
        }
 
        Double currency = entity.getCurrency();
        if (currency != null) {
            stmt.bindDouble(4, currency);
        }
 
        java.util.Date lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(5, lastUpdate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Currency readEntity(Cursor cursor, int offset) {
        Currency entity = new Currency( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromCurrency
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // toCurrency
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // currency
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // lastUpdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Currency entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFromCurrency(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToCurrency(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCurrency(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLastUpdate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Currency entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Currency entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
